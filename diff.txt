diff --git a/app/main/views.py b/app/main/views.py
index 2d56d75..ebe9b47 100755
--- a/app/main/views.py
+++ b/app/main/views.py
@@ -268,8 +268,8 @@ def saveCodee():
    codee_path = jsonData['codee_path']
    codee_data = jsonData['codee_data']
    print(codee_data)
    f = open(os.path.join(root, username, codee_path), "w{+b+}")
    f.write(codee_data{+.encode('utf8')+})
    f.close()
    return make_response("codee file updated", 200) 

diff --git a/app/static/script/component/menubar.js b/app/static/script/component/menubar.js
index 2f56257..d467233 100755
--- a/app/static/script/component/menubar.js
+++ b/app/static/script/component/menubar.js
@@ -1,7 +1,7 @@
const menu = document.querySelector(".context-menu-one");
let line[- -];
let start_index[- -];
let end_index[- -];

function getTD(elem) {
  while (elem.tagName != "TD") {
@@ -18,70 +18,69 @@ function findLine(elem) {
}

function findOffsetTag(node, offset) {
  let childs = node.childNodes[- -];
  let i = 0[- -];
  let length = 0[- -];
  let prev[- -];
  let prevOffset[- -];
  while (length < offset) {
    prevOffset = length[- -];
    prev = childs[i][- -];
    if (childs[i].tagName == null) {
      length += childs[i].nodeValue.length[- -];
    } [-   -]else {
      length += childs[i].innerText.length[- -];
    }
    i++[- -];
  }

  if (prev.tagName == null) {
    return {{+ +}tag: prev, startOffset: offset - prevOffset[-}-] {+}+};
  } [- -]else {
    return findOffsetTag(prev, offset - prevOffset)[- -];
  }
}

// console.log(range.startContainer.hasChildNodes() ) ;
// console.log(range.startContainer.parentElement.innerText.length ) ;
function findOffset(node, offset) {
  let prev = node[- -];
  while (node.tagName != "TD") {
    node = node.previousSibling[- -];
    while (node != null) {
      if (node.tagName == null) {
        offset += node.nodeValue.length[- -];
      } [-     -]else {
        offset += node.innerText.length[- -];
      }
      prev = node[- -];
      node = node.previousSibling[- -];
    }
    node = prev.parentElement[- -];
    prev = node[- -];
  }
  return offset[- -];
}

{+if (menu != null) {+}
{+  +}menu.addEventListener("click", function (e) {
  {+  +}e.preventDefault();

  {+  +}var element = document.getSelection();
  {+  +}var selectedText = element.toString();
  {+  +}if (selectedText != "") {
    {+  +}const conMenu = document.querySelector(".context-menu-list.context-menu-root");
    {+  +}const x = window.innerWidth - 200 > e.clientX ? e.clientX : window.innerWidth - 210;
    {+  +}const y = window.innerHeight > e.clientY ? e.clientY : window.innerHeight - 100;

    {+  +}// console.log(`x: ${x}, y: ${y}`) ;
    {+  +}conMenu.style.top = `${y + 10}px`;
    {+  +}conMenu.style.left = `${x}px`;

    {+  +}$(".context-menu-one").contextMenu();
  {+  +}}
{+  +}});
{+}+}

var range = null;
var selected = null;
@@ -92,29 +91,30 @@ function saveSelection() {
    if (selected.getRangeAt && selected.rangeCount) {
      return selected.getRangeAt(0);
    } else if (document.selection && document.selection.createRange) {
      return document.[-selection.-]createRange();
    }
    return null;
  }
}

function restroeSelection() {

  if (flag) {
    console.log("restoreSelection")[- -];
    let tdTag = document.querySelector(`#L${line} > .hljs-ln-code`)[- -];
    let startTag = findOffsetTag(tdTag, start_index)[- -];
    let endTag = findOffsetTag(tdTag, end_index)[- -];
    let new_range = document.createRange()[- -];
    new_range.setStart(startTag.tag, startTag.startOffset)[- -];
    new_range.setEnd(endTag.tag, endTag.startOffset)[- -];
    document.getSelection().removeAllRanges()[- -];
    document.getSelection().addRange(new_range){+;+}
{+   +} {+console.log(document.getSelection().anchorNode)+};
  }
}
// let url_flag = 0 ;
var flag = 0;
function createFakeSelection(event) {
{+  console.log(`createFakeSelection : ${flag}`);+}
  if (!flag) {
    var span = createNewSpan(document.getSelection());
    span.classList.add("selected");
@@ -134,11 +134,22 @@ function removeFakeSelection(event) {
  //   var select = document.querySelector(".selected");
  //   select.classList.remove("selected");
  // }
  // else flag 일땐
  [- -]console.log(flag)[- -];
  if (flag) {
    var select = document.querySelector(".selected");
    select.classList.remove("selected");
{+    const children = [];+}
{+    while (select.firstChild) {+}
{+      const child = select.firstChild;+}
{+      children.push(child);+}
{+      select.parentNode.insertBefore(child, select);+}
{+    }+}
{+    console.log();+}
{+    select.remove();+}
{+    Array.from(children).map((node) => {+}
{+      merge(node);+}
{+    });+}
    merge(select);
    restroeSelection();
  }
@@ -146,8 +157,11 @@ function removeFakeSelection(event) {
  flag = 0;
}

function openLink({+self+}) {
  console.log("[-he-]{+click link");+}
{+  conso+}l{+e.+}lo{+g(self);+}
{+  url = self.getAttribute("url+}"){+;+}
{+ +} {+window.open(url, "_blank").focus()+};
}

$.contextMenu({
@@ -165,22 +179,36 @@ $.contextMenu({
    let span;
    if (key == "comment") {
      console.log("comment");
{+      span = createNewSpan(selection);+}
{+      span.classList.add("comment");+}
    } //else if (key == "highlight") {
    else if (key == "red") {
[-      console.log("red");-]
      span = createNewSpan(selection);
[-      span.classList.add("decoration");-]
      span.classList.add("red");
{+      const [start, end] = getIndices(span);+}
{+      var tdNode = getTD(span);+}
{+      line = tdNode.getAttribute("data-line-number");+}
{+      const ID = randomId();+}
{+      span.id = ID;+}
{+      addWordHighlight("red", start, end, line, ID);+}
    } else if (key == "yellow") {
[-      console.log("yellow");-]
      span = createNewSpan(selection);
[-      span.classList.add("decoration");-]
      span.classList.add("yellow");
{+      const [start, end] = getIndices(span);+}
{+      var tdNode = getTD(span);+}
{+      line = tdNode.getAttribute("data-line-number");+}
{+      const ID = randomId();+}
{+      span.id = ID;+}
{+      addWordHighlight("yellow", start, end, line, ID);+}
    } else if (key == "green") {
[-      console.log("green");-]
      span = createNewSpan(selection);
[-      span.classList.add("decoration");-]
      span.classList.add("green");
{+      const [start, end] = getIndices(span);+}
{+      var tdNode = getTD(span);+}
{+      line = tdNode.getAttribute("data-line-number");+}
{+      const ID = randomId();+}
{+      span.id = ID;+}
{+      addWordHighlight("green", start, end, line, ID);+}
    } else if (key == "record") {
      console.log("record");
    } else if (key == "hide") {
@@ -189,10 +217,12 @@ $.contextMenu({
      const cloneNode = td.cloneNode(true);
      // docfrag.appendChild(cloneNode);
      span = createNewSpan(selection);
      const [-new-]I[-d-]{+D+} = randomId();
      {+const [+}s[-p-]{+t+}a{+rt, e+}n[-.i-]d{+]+} = [-n-]{+g+}e[-w-]{+t+}I{+n+}d{+ices(span)+};
      [-cons-]{+var tdN+}o[-l-]{+d+}e[-.lo-]{+ = +}g{+etTD+}({+spa+}n[-ewId,-]{+);+}
{+     +} [-c-]l[-o-]{+i+}ne{+ = td+}Node{+.getAttribute("data-line-number"+});
      [-// con-]s[-ole-]{+pan+}.[-l-]{+id = ID;+}
{+      addW+}o[-g-]{+rdHide+}(s[-p-]{+t+}a{+rt, end, li+}n{+e, ID+});
      ellipsisSpan(span);
    } else if (key == "link") {
      console.log("link");
@@ -211,6 +241,27 @@ $.contextMenu({
    comment: {
      // name: "Comment",
      icon: "fa-light fa-comment-dots",
{+      items: {+}
{+        "link-1": {+}
{+          type: "text",+}
{+          events: {+}
{+            keyup: function (e) {+}
{+              let inputs = document.getElementsByName("context-menu-input-link-1");+}
{+              if (e.keyCode == 13 && inputs[0].value) {+}
{+                const conMenu = document.querySelector(".context-menu-list.context-menu-root");+}
{+                addComment(e, conMenu.style.top, conMenu.style.left);+}

{+                Array.from(inputs).map((input) => {+}
{+                  input.removeEventListener("mousedown", createFakeSelection);+}
{+                  input.removeEventListener("blur", removeFakeSelection);+}
{+                });+}
{+                flag = 0;+}
{+                $(".context-menu-list").trigger("contextmenu:hide");+}
{+              }+}
{+            },+}
{+          },+}
{+        },+}
{+      },+}
    },
    highlight: {
      // name: "Highlight",
@@ -254,53 +305,43 @@ $.contextMenu({
            keyup: function (e) {
              // add some fancy key handling here?
              let link_tag = document.getElementsByName("context-menu-input-link-1");
              if (e.keyCode == 13 && link_tag[[-0-]{+1+}].value) {
                console.log(range)[- -];
                //selectedNode = JSON.parse(localStorage.getItem("selection"));
                console.log("link enter");
                // getting link
                // line number 가져오기
                let url = link_tag[[-0-]{+1+}].value;
                let id = randomId()[- -];
                console.log(url);

[-                // create a tag-]
[-                // var a_tag = document.createElement("a");-]
[-                // a_tag.classList.add("link");-]
[-                // a_tag.href = url;-]
[-                // a_tag.setAttribute("id", randomId());-]
[-                // a_tag.setAttribute("target", "_blank");-]

                // add to a tag
                [-// merge하고-]
[-                -]var select = document.querySelector(".selected")[- -];
                {+// +}select.[-classList.-]{+w+}r[-emove-]{+ap+}([-"selected")-]
 [-;-]               {+//  +} [-me-]{+  `<a id="${id}" u+}r[-ge(-]{+l = "${url}" cla+}s[-e-]{+s="+}l{+ink" hr+}e{+f="javas+}c{+rip+}t{+:void(0+})[- -];{+"+} {+onclick="openLink(this)"></a>`+}
                // [-tag추가하기(find-] [-offset-] [-node-]){+;+}
                [-let tdTag = document-]{+$("+}.[-queryS-]{+s+}elect[-or(`#L${lin-]e[-} > .hljs-ln-co-]d[-e`-]{+"+}){+.wrap(+}
 [-;-]                [-let-] [-startT-]{+`<+}a[-g-] {+id+}=[- f-]{+"${+}i[-n-]d[-OffsetTag(tdTag,-]{+}"+} [-sta-]{+u+}r[-t_index) ;-]
[-              -]{+l+} {+=+} {+"${ur+}l[-et-]{+}"+} [-endT-]{+cl+}a[-g -]{+ss+}=[- f-]{+"l+}in[-dOffs-]{+k" hr+}e[-tT-]{+f="j+}a[-g(tdT-]{+v+}a[-g, end_-]{+script:vo+}i[-n-]d[-ex-]{+(0+})[- -];{+"+} [-               let new_range = d-]o[-cume-]n[-t.sele-]c[-t-]{+l+}i[-on.-]c[-reateRang-]{+k="op+}e[-() ;-]
[-                -]n[-ew_ra-]{+Li+}n[-ge.setStart-]{+k+}([-startTag.tag, star-]t[-Tag.startOff-]{+hi+}s[-et-])[- ;-]{+"></a>`+}
                [-new_range.setEnd(endTag.tag, endTag.startOffset-])[- -];
                [-document.getS-]{+s+}elect{+.classL+}i[-on()-]{+st+}.remove[-Al-]{+("se+}l[-Rang-]e[-s(-]{+cted"+})[- -];
                [-document.getS-]{+// s+}elect[-ion()-].add[-Range(n-]{+Ev+}e[-w_ra-]n[-ge) ;-]
[-                le-]t[- -]{+Li+}s[-pan = crea-]te[-NewSpa-]n{+er+}([-d-]{+"h+}o[-cument.g-]{+v+}e[-tS-]{+r", r+}e[-l-]{+mov+}e[-ct-]{+L+}i[-o-]n[-()-]{+kTag+}) ;

{+                // cache에 store하기+}
{+                if (ref_data != null) {+}
{+                  console.log("addLink");+}
{+                  addLink(start_index, end_index, line, url, id);+}
{+                  console.log(ref_data);+}
{+                }+}


[-                // let tdTag = document.querySelector(`#L${line} > .hljs-ln-code`) ;-]
[-                // console.log(tdTag) ;-]
[-                // let startTag = findOffsetTag(tdTag, start_index) ;-]
[-                // console.log(startTag) ;-]
[-                // $(".selected").wrap(`<a id="${id}" class="link" href="javascript:void(0) onclick=openLink()"></a>`) ;-]
[-                // $(".selected").wrap(`<a id="${randomId()}" class="link" href="${url}"></a>`);-]
                // removeEventListener하기
                var input{+s+} = document.getElementsByName("context-menu-input-link-1")[-[0]-]{+;+}
{+         +} {+      Array.from(inputs).map((input) => {+}
{+                  input.removeEventListener("mousedown", createFakeSelection)+};
                {+  +}input.removeEventListener("blur", removeFakeSelection){+;+}
{+                });+}
{+        +} {+       flag = 0+};
                console.log("fisrtst")[- -];
                [-// -]$([-'-]{+"+}.context-menu-list[-'-]{+"+}).trigger([-'-]{+"+}contextmenu:hide[-'-]{+"+}){+;+}
              }
            },
          },
@@ -310,30 +351,36 @@ $.contextMenu({
  },
  events: {
    hide: function (e) {
      var input{+s+} = document.getElementsByName("context-menu-input-link-1")[-[0] -];
      [-const code = d-]{+Array.fr+}o[-cu-]m[-e-]{+(i+}n{+pu+}t{+s)+}.[-q-]{+map((inp+}u[-erySelec-]t[-or("#code"-]) [-;-]{+=> {+}
{+  +}      input.removeEventListener("mousedown", createFakeSelection)[- -];
      {+  +}input.removeEventListener("blur", removeFakeSelection){+;+}
{+   +} {+  });+}
{+      if (flag) {+}
{+        removeFakeSelection();+}
{+      }+}
{+      // const code = document.querySelector("#code");+}
{+      // document.getSelection().removeAllRanges()+};
      console.log("hide")[- -];
    },
    show: function (e) {
      // show
      var input{+s+} = document.getElementsByName("context-menu-input-link-1")[-[0]-]{+;+}
{+      Array.from(inputs).map((input) => {+}
{+   +} {+    input.addEventListener("mousedown", createFakeSelection);+}
{+        input.addEventListener("blur", removeFakeSelection);+}
{+      })+};
      {+// +}const code = document.querySelector("#code")[- -];
      range = saveSelection()[- -];

      // line, start index, end index를 구함
      var tdNode = getTD(range.commonAncestorContainer)[- -];
      console.log(tdNode)[- -];
      line = tdNode.getAttribute("data-line-number")[- -];
      start_index = findOffset(range.startContainer, range.startOffset)[- -];
      end_index = findOffset(range.endContainer, range.endOffset)[- -];
      console.log(start_index)[- -];
      console.log(end_index)[- ;-]
[-      input.addEventListener("mousedown", createFakeSelection) ;-]
[-      // // remove fake selection-]
[-      input.addEventListener("blur", removeFakeSelection) -];
    },
  },
});
diff --git a/app/static/script/editcodee.js b/app/static/script/editcodee.js
index 4d9a780..b47c29a 100755
--- a/app/static/script/editcodee.js
+++ b/app/static/script/editcodee.js
@@ -32,6 +32,22 @@ function addLineHide(start, end, ID) {
  ref_data[0]["data"].push({ type: "line_hide", start: start, end: end, id: ID });
}

{+function addLink(start, end, line, url, ID) {+}
{+  ref_data[0]["data"].push({ type: "link", start: start, end: end, line: line, url: url, id: ID });+}
{+}+}

{+function addWordComment(start, end, line, comment, ID) {+}
{+  ref_data[0]["data"].push({ type: "comment", start: start, end: end, line: line, comment: comment, id: ID });+}
{+}+}

{+function addWordHighlight(color, start, end, line, ID) {+}
{+  ref_data[0]["data"].push({ type: "highlight", color: color, start: start, end: end, line: line, id: ID });+}
{+}+}

{+function addWordHide(start, end, line, ID) {+}
{+  ref_data[0]["data"].push({ type: "word_hide", start: start, end: end, line: line, id: ID });+}
{+}+}

function deleteLineHide(ID) {
  for (let i = 0; i < ref_data[0]["data"].length; i++) {
    if (ref_data[0]["data"][i].id == ID && ref_data[0]["data"][i].type == "line_hide") {
@@ -44,6 +60,7 @@ function saveCodee(path, username) {
  // path를 읽고
  // fetch로 보내기
  console.log(filepath);
{+  console.log(ref_data);+}
  const opts = {
    method: "POST",
    body: JSON.stringify({
diff --git a/app/static/script/index.js b/app/static/script/index.js
index 46d21ba..b6aeffe 100755
--- a/app/static/script/index.js
+++ b/app/static/script/index.js
@@ -7,25 +7,154 @@ window.addEventListener("load", async function () {
    console.log(JSON.stringify(ref_data));
    hideLine();
    ref_data[0].data.map((deco) => {
      cons[-ol-]{+t typ+}e[-.log(-]{+ = +}deco[-)-]{+.type+};
      [-cons-]{+le+}t s = [-deco.start-]{+null+};
      [-cons-]{+le+}t e = [-deco.e-]n[-d-]{+ull+};
      [-cons-]{+le+}t n = [-Math.abs(s-]{+null;+}
{+ +} [---] {+   l+}e[-)-]{+t+} [-+-]{+i+} [-1-]{+= null+};
      [-co-]{+let l = +}n[-s-]{+ull;+}
{+      le+}t [-i-]{+url+} = [-d-]{+null;+}
{+      l+}e{+t +}co[-.id-]{+lor = null+};
      [-se-]le[-c-]t[-e-]{+ t+}d[-Info.push({-]{+Tag,+} start[-:-]{+Tag,+} [-s-]{+endTag+}, n[-umb-]e{+w_+}r[-: -]{+a+}n{+ge+}, {+span;+}
{+      switch (type) {+}
{+        case "line_h+}id{+e"+}:
 [-i-] [-});-]{+  +}      console.log([-sel-]{+d+}ec[-tedInf-]o);
      [-let-] [-lin-]{+   s = deco.start;+}
{+          e = deco.end;+}
{+          n = Math.abs(s - e) + 1;+}
{+          i = deco.id;+}
{+          selectedInfo.push({ start: s, number: n, id: i });+}
{+          console.log(selectedInfo);+}
{+          let lin+}e = document.querySelector(`#L${s}`);
      {+    +}console.log(line);
      {+    +}createEllipsisNode(line);
      {+    +}for (let i = 0; i < n; i++) {
        {+    +}line.classList.add("hidden");
        {+    +}line = line.nextElementSibling;
{+          }+}
{+          break;+}
{+        case "link":+}
{+          console.log(deco);+}
{+          s = deco.start;+}
{+          e = deco.end;+}
{+          l = deco.line;+}
{+          url = deco.url;+}
{+          i = deco.id;+}

{+          // tdTag찾기+}

{+          tdTag = document.querySelector(`#L${l} .hljs-ln-code`);+}
{+          console.log(tdTag);+}
{+          // range정하고 그것만큼 createNewspan하기+}
{+          startTag = findOffsetTag(tdTag, s);+}
{+          endTag = findOffsetTag(tdTag, e);+}
{+          new_range = document.createRange();+}
{+          new_range.setStart(startTag.tag, startTag.startOffset);+}
{+          new_range.setEnd(endTag.tag, endTag.startOffset);+}
{+          document.getSelection().removeAllRanges();+}
{+          document.getSelection().addRange(new_range);+}
{+          span = createNewSpan(document.getSelection());+}
{+          document.getSelection().removeAllRanges();+}
{+          // add class rendering+}
{+          span.classList.add("rendering");+}
{+          // $(.rendering).wrap하기+}
{+          $(".rendering").wrap(+}
{+            `<a id="${i}" url = "${url}" class="link" href="javascript:void(0);" onclick="openLink(this)"></a>`+}
{+          );+}
{+          // remove class rendering+}
{+          span.classList.remove("rendering");+}
{+          break;+}
{+        case "comment":+}
{+          // start, end, line, comment, ID+}
{+          s = deco.start;+}
{+          e = deco.end;+}
{+          l = deco.line;+}
{+          c = deco.comment;+}
{+          i = deco.id;+}
{+          tdTag = document.querySelector(`#L${l} .hljs-ln-code`);+}
{+          console.log(tdTag);+}
{+          // range정하고 그것만큼 createNewspan하기+}
{+          startTag = findOffsetTag(tdTag, s);+}
{+          endTag = findOffsetTag(tdTag, e);+}
{+          new_range = document.createRange();+}
{+          new_range.setStart(startTag.tag, startTag.startOffset);+}
{+          new_range.setEnd(endTag.tag, endTag.startOffset);+}
{+          document.getSelection().removeAllRanges();+}
{+          document.getSelection().addRange(new_range);+}
{+          span = createNewSpan(document.getSelection());+}
{+          document.getSelection().removeAllRanges();+}
{+          span.classList.add("comment-underline");+}
{+          console.log(span);+}
{+          var rect = span.getBoundingClientRect();+}

{+          registerCommentEvents(c, span, `${rect.top - 10}px`, `${rect.left}px`, i);+}
{+          break;+}
{+        case "highlight":+}
{+          color = deco.color;+}
{+          s = deco.start;+}
{+          e = deco.end;+}
{+          l = deco.line;+}
{+          i = deco.id;+}
{+          tdTag = document.querySelector(`#L${l} .hljs-ln-code`);+}
{+          startTag = findOffsetTag(tdTag, s);+}
{+          endTag = findOffsetTag(tdTag, e);+}
{+          new_range = document.createRange();+}
{+          new_range.setStart(startTag.tag, startTag.startOffset);+}
{+          new_range.setEnd(endTag.tag, endTag.startOffset);+}
{+          document.getSelection().removeAllRanges();+}
{+          document.getSelection().addRange(new_range);+}
{+          span = createNewSpan(document.getSelection());+}
{+          document.getSelection().removeAllRanges();+}
{+          span.classList.add(color);+}

{+          break;+}
{+        case "word_hide":+}
{+          s = deco.start;+}
{+          e = deco.end;+}
{+          l = deco.line;+}
{+          i = deco.id;+}
{+          tdTag = document.querySelector(`#L${l} .hljs-ln-code`);+}
{+          startTag = findOffsetTag(tdTag, s);+}
{+          endTag = findOffsetTag(tdTag, e);+}
{+          new_range = document.createRange();+}
{+          new_range.setStart(startTag.tag, startTag.startOffset);+}
{+          new_range.setEnd(endTag.tag, endTag.startOffset);+}
{+          document.getSelection().removeAllRanges();+}
{+          document.getSelection().addRange(new_range);+}
{+          span = createNewSpan(document.getSelection());+}
{+          document.getSelection().removeAllRanges();+}
{+          span.classList.add("hidden");+}

{+          const ellipsisBtn = document.createElement("span");+}
{+          ellipsisBtn.classList.add("ellipsis");+}
{+          ellipsisBtn.innerText = "⋯";+}
{+          span.parentElement.insertBefore(ellipsisBtn, span);+}

{+          ellipsisBtn.addEventListener("click", () => {+}
{+            span.classList.remove("hidden");+}
{+            ellipsisButton.remove();+}
{+            const children = [];+}
{+            while (span.firstChild) {+}
{+              const child = span.firstChild;+}
{+              children.push(child);+}
{+              // console.log(child);+}
{+              span.parentNode.insertBefore(child, span);+}
{+            }+}
{+            console.log();+}
{+            span.remove();+}
{+            Array.from(children).map((node) => {+}
{+              merge(node);+}
{+            });+}
{+            // merge(newSpan);+}
{+          });+}
      }
    });
  }
  openDirectoryTree();
});

{+function findNodesByOffset(start, end) {}+}

const code = document.querySelector("code");
let lineSelected = false;
let start = -1;
@@ -170,9 +299,6 @@ function hideLine() {
  });
}

[-// code.addEventListener("mouseup", selectText, false);-]

[-// function splitText(textNode, text, start, same = false) {-]
function splitText(textNode, index, textLength, start, same = false) {
  const fullText = textNode.nodeValue;
  text = start ? fullText.substring(index, index + textLength) : fullText.substring(0, index);
@@ -189,53 +315,39 @@ function splitSpan(span, index, textLength, start, same = false) {
  const text = start ? fullText.substring(index, index + textLength) : fullText.substring(0, index);
  if (same) {
    if (fullText === text) {
[-      // split 하지 않는 경우-]
[-      //return fragmented(FALSE, span);-]
      return [FRAGMENT.FALSE, span];
    }
    span.after(span2);
    if (index === 0) {
[-      // text가 마지막 부분-]
      span.innerText = text;
      span2.innerText = fullText.substring(text.length, fullText.length);
      return [FRAGMENT.HEAD, span];
    } else if (index === fullText.length - text.length) {
[-      // text가 첫번째 부분-]
      span.innerText = fullText.substring(0, index);
      span2.innerText = text;
      return [FRAGMENT.TAIL, span2];
    } else {
[-      // text가 가운데 부분-]
      span3 = span.cloneNode(false);
      span.innerText = fullText.substring(0, index);
      span2.innerText = text;
      span3.innerText = fullText.substring(index + text.length, fullText.length);
      span2.after(span3);
[-      //return fragmented(CENTER, span2);-]
      return [FRAGMENT.CENTER, span2];
    }
  } else {
    if (fullText === text) {
[-      // split 하지 않는 경우-]
[-      //return fragmented(FALSE, span);-]
      return [FRAGMENT.FALSE, span];
    }
    span.after(span2);
    if (start) {
[-      //const span2 = span.cloneNode("span");-]
      span.innerText = fullText.substring(0, index);
      span2.innerText = text;
[-      console.log(span.innerText);-]
[-      console.log(span2.innerText);-]
    } else {
      span.innerText = text;
      span2.innerText = fullText.substring(text.length, fullText.length);
    }
  }

[-  console.log("span >", span);-]
[-  console.log("span2 >", span2);-]
[-  //return start ? fragmented(TAIL, span2) : fragmented(HEAD, span);-]
  return start ? [FRAGMENT.TAIL, span2] : [FRAGMENT.HEAD, span];
}

@@ -298,7 +410,7 @@ function nodeType(element) {
}

function createNewSpan(selectionText) {
  {+// +}console.log(selectionText);
  // console.log(selectionText.toString());
  if (selectionText.toString() === "") {
    return;
@@ -308,12 +420,8 @@ function createNewSpan(selectionText) {
  let selectedLast = selectionText.focusNode;
  let firstOffset = selectionText.anchorOffset;
  let lastOffset = selectionText.focusOffset;
[-  // selectionText.removeAllRanges();-]
  let anchorTagType = selectedFirst.parentElement.tagName;
  let focusTagType = selectedLast.parentElement.tagName;
[-  const parent = selectedFirst.parentElement.closest("td");-]
[-  // console.log("parent> ", parent);-]
[-  // console.log("selectedFirst >", selectedFirst);-]
  let startNode, endNode;

  const cutSpan = document.createElement("span");
@@ -328,35 +436,6 @@ function createNewSpan(selectionText) {
    // 아예 같은 노드
    if (lastOffset < firstOffset) [firstOffset, lastOffset] = [lastOffset, firstOffset];

[-    // const textLength = selectedFirst.nodeValue.substring(firstOffset, selectedFirst.nodeValue.length).length;-]
[-    // if (nodeType(selectedFirst) == NODE.TEXT) {-]
[-    //   [fragmented, startNode] = splitText(selectedFirst, firstOffset, textLength, true);-]
[-    //   // startNode = splitNode(selectedFirst, firstOffset, textLength, true);-]
[-    // } else if (nodeType(selectedFirst) == NODE.SPAN) {-]
[-    //   [fragmented, startNode] = splitSpan(selectedFirst.parentElement, firstOffset, textLength, true);-]
[-    // }-]
[-    // startNode.parentElement.insertBefore(cutSpan, startNode);-]
[-    // const start = splitTree(cutSpan, Position.START, true);-]

[-    // selectedLast = startNode.firstChild;-]
[-    // console.log(selectedLast.nodeValue);-]

[-    // const textLength2 = selectedLast.nodeValue.substring(-]
[-    //   0,-]
[-    //   selectedLast.nodeValue.length - firstOffset-]
[-    // ).length;-]
[-    // console.log(textLength, textLength2);-]
[-    // if (nodeType(selectedLast) == NODE.TEXT) {-]
[-    //   [fragmented, endNode] = splitText(selectedLast, 0, textLength2, true);-]
[-    // } else if (nodeType(selectedLast) == NODE.SPAN) {-]
[-    //   [fragmented, endNode] = splitSpan(selectedLast.parentElement, 0, textLength2, true);-]
[-    // }-]
[-    // endNode.parentElement.insertBefore(cutSpan, endNode.nextSibling);-]
[-    // const end = splitTree(cutSpan, Position.END, true);-]

[-    // const newSpan = bindTags(start, end);-]
[-    // return newSpan;-]

    const textLength = selectedFirst.nodeValue.substring(firstOffset, lastOffset).length;
    let start, end;
    if (nodeType(selectedFirst) == NODE.TEXT) {
@@ -364,16 +443,12 @@ function createNewSpan(selectionText) {
    } else {
      [fragmented, startNode] = splitSpan(selectedFirst.parentElement, firstOffset, textLength, true, true);
    }
    [-if (fragmented === FRAGMENT.HEAD) -]startNode.parentElement.insertBefore(cutSpan, startNode[-.nextSibling-]);
    [-else {-]
[-      startNode.parentElement.insertBefore(cutSpan, startNode);-]
[-      -]start = splitTree(cutSpan, Position.START, {+fragmented === FRAGMENT.FALSE ? false : +}true);
    [-  -]console.log(start);
    [-  -]startNode.parentElement.insertBefore(cutSpan, startNode.nextSibling);
    [-  -]end = splitTree(cutSpan, Position.END, {+fragmented === FRAGMENT.FALSE ? false : +}true);
    [-  -]console.log(end);[-    }-]
    const newSpan = bindTags(end, null);
    return newSpan;
  }
@@ -386,7 +461,7 @@ function createNewSpan(selectionText) {
    [fragmented, startNode] = splitSpan(selectedFirst.parentElement, firstOffset, textLength, true);
  }
  startNode.parentElement.insertBefore(cutSpan, startNode);
  const start = splitTree(cutSpan, Position.START, {+fragmented === FRAGMENT.FALSE ? false : +}true);
  // startNode = startNode.closest("td>span");
  // startNode.setAttribute("fragmented", fragmented);

@@ -397,7 +472,7 @@ function createNewSpan(selectionText) {
    [fragmented, endNode] = splitSpan(selectedLast.parentElement, lastOffset, textLength2, false);
  }
  endNode.parentElement.insertBefore(cutSpan, endNode.nextSibling);
  const end = splitTree(cutSpan, Position.END, {+fragmented === FRAGMENT.FALSE ? false : +}true);
  // endNode = endNode.closest("td>span");
  // endNode.setAttribute("fragmented", fragmented);

@@ -431,45 +506,11 @@ const Position = {
  END: 1,
};

[-function splitNode(node, index, length, start, same = false) {-]
[-  if (nodeType(node) == NODE.TEXT) {-]
[-    const fullText = node.nodeValue;-]
[-    console.log(fullText);-]
[-    text = start ? fullText.substring(index, index + length) : fullText.substring(0, index);-]
[-    console.log(text);-]
[-    const span = document.createElement("span");-]
[-    if (fullText === text) {-]
[-      span.innerText = text;-]
[-      node.before(span);-]
[-      node.remove();-]
[-    }-]
[-    if (index === 0) {-]
[-      span.innerText = text;-]
[-      //span2.innerText = fullText.substring(text.length, fullText.length);-]
[-      node.nodeValue = fullText.substring(text.length, fullText.length);-]
[-      //node.before(fragmented(HEAD, span));-]
[-      node.before(span);-]
[-    } else if (index === fullText.length - text.length) {-]
[-      //span1.innerText = fullText.substring(0, index);-]
[-      node.nodeValue = fullText.substring(0, index);-]
[-      span.innerText = text;-]
[-      node.after(span);-]
[-    } else {-]
[-      const node2 = document.createTextNode(fullText.substring(0, index));-]
[-      span.innerText = text;-]
[-      node2.nodeValue = fullText.substring(index + text.length, fullText.length);-]
[-      node.after(span);-]
[-      span.after(node2);-]
[-    }-]
[-    return span;-]
[-  } else {-]
[-  }-]
[-}-]
function splitTree(cutElement, position, split) {
  const bound = cutElement.parentElement.closest("td");
  let parent, right, grandparent;
  let node = position === Position.START ? cutElement.nextSibling : cutElement.previousSibling;
  if ({+parseInt(+}node.[-has-]{+get+}Attribute("fragmented")) {+=== FRAGMENT.TAIL) +}{
    // TAIL이었으면 CENTER
    node.setAttribute("fragmented", FRAGMENT.CENTER);
  } else {
@@ -484,7 +525,8 @@ function splitTree(cutElement, position, split) {
    grandparent.insertBefore(right, parent.nextSibling); // parent 뒤에 right를 삽입
    grandparent.insertBefore(cutElement, right); // right 앞에 cutElement 삽입
    node = position === Position.START ? right : parent;
    if ({+parseInt(+}node.[-has-]{+get+}Attribute("fragmented")) {+=== FRAGMENT.TAIL)+}
{+      +}node.setAttribute("fragmented", FRAGMENT.CENTER);
    else node.setAttribute("fragmented", position === Position.START ? FRAGMENT.TAIL : FRAGMENT.HEAD);
  }
  if (parent === bound) {
@@ -492,7 +534,15 @@ function splitTree(cutElement, position, split) {
    parent = cutElement.previousSibling;
  }
  cutElement.remove();
  [-return-]{+if+} {+(+}position === Position.START{+) {+}
{+    if (nodeType(parent) === NODE.SPAN && parent.hasAttribute("fragmented"))+}
{+      parent.removeAttribute("fragmented");+}
{+   +} [-?-]{+return+} right{+;+}
{+  } else+} [-:-]{+{+}
 {+   if (nodeTy+}p{+e(right) === NODE.SPAN && right.h+}a{+sAtt+}r{+ibute("fragm+}ent{+ed"))+}
{+      right.removeAttribute("fragmented")+};
{+    return parent;+}
{+  }+}
}

function merge(wrapper) {
@@ -501,9 +551,9 @@ function merge(wrapper) {

  // console.log(listToMerge);
  const type = parseInt(wrapper.getAttribute("fragmented"));

  [-let node, prevNode, nextNode;-]
[- -]{+if+} [-console.log-](wrapper.childNodes[-);-]{+.length+} {+==+} [-if-]{+1+} [-(-]{+&& !+}wrapper.[-c-]{+firstC+}hild[-Nodes-].{+firstChild) {+}
{+    +}le[-ng-]t[-h-] [-==-]{+node,+} [-1)-]{+prevNode,+} [-{-]{+nextNode;+}
    switch (type) {
      case FRAGMENT.FALSE:
        if (wrapper.nodeType === Node.ELEMENT_NODE) {
@@ -516,7 +566,7 @@ function merge(wrapper) {
        break;
      case FRAGMENT.HEAD: //endNode, nextSibling과 이어야
        node = wrapper;
        [-let -]nextNode = wrapper.nextSibling;
        if (node.className === "") {
          node.innerText = node.innerText + nextNode.innerText;
          const text = document.createTextNode(node.innerText);
@@ -548,7 +598,7 @@ function merge(wrapper) {
        break;
      case FRAGMENT.TAIL: //startNode, previousSibling과 이어야 함
        node = wrapper;
        [-let -]prevNode = wrapper.previousSibling;
        if (node.className === "") {
          // split하느라 span에 감싸진 text node
          node.innerText = prevNode.innerText + node.innerText;
@@ -579,10 +629,10 @@ function merge(wrapper) {
        nextNode = wrapper.nextSibling;
        /// ********** merge Call
        while (nextNode.firstChild) {
          {+// +}nodes.push(nextNode.firstChild);
          node.appendChild(nextNode.firstChild);
        }
        Array.from(node[-s-]{+.children+}).map((node) => {
          merge(node);
        });
        nextNode.remove();
@@ -627,3 +677,49 @@ function merge(wrapper) {
    }
  }
}

{+function addComment(e, x, y) {+}
{+  let link_tag = document.getElementsByName("context-menu-input-link-1");+}
{+  if (e.keyCode == 13 && link_tag[0].value) {+}
{+    console.log("comment enter");+}
{+    let comment = link_tag[0].value;+}
{+    let id = randomId();+}
{+    console.log(comment);+}

{+    var select = document.querySelector(".selected");+}
{+    select.classList.remove("selected");+}
{+    select.classList.add("comment-underline");+}
{+    registerCommentEvents(comment, select, x, y);+}

{+    // const x = window.innerWidth - 200 > e.clientX ? e.clientX : window.innerWidth - 210;+}
{+    // const y = window.innerHeight > e.clientY ? e.clientY : window.innerHeight - 100;+}

{+    const input = document.getElementsByName("context-menu-input-link-1")[0];+}
{+    input.removeEventListener("blur", removeFakeSelection);+}

{+    var tdNode = getTD(select);+}
{+    const line = tdNode.getAttribute("data-line-number");+}
{+    const [start, end] = getIndices(select);+}
{+    addWordComment(start, end, line, comment, randomId());+}
{+  }+}
{+}+}

{+function registerCommentEvents(comment, node, x, y, id) {+}
{+  const commentSpan = document.createElement("span");+}
{+  commentSpan.innerText = comment;+}
{+  commentSpan.classList.add("comment");+}
{+  commentSpan.classList.add("hidden");+}
{+  commentSpan.id = id;+}
{+  document.querySelector("#export").appendChild(commentSpan);+}
{+  const c = document.getElementById(id);+}
{+  c.style.top = x;+}
{+  c.style.left = y;+}

{+  node.addEventListener("mouseover", () => {+}
{+    // console.log(comment);+}
{+    commentSpan.classList.remove("hidden");+}
{+  });+}
{+  node.addEventListener("mouseleave", () => {+}
{+    commentSpan.classList.add("hidden");+}
{+  });+}
{+}+}
diff --git a/app/static/style.css b/app/static/style.css
index e8a38b5..2cb6896 100755
--- a/app/static/style.css
+++ b/app/static/style.css
@@ -20,6 +20,7 @@ pre {
div#export {
  /* padding-top: 30px;
  padding-left: 30px; */
{+  /* position: absolute; */+}
}
div.filelist {
  padding-top: 10px;
@@ -477,3 +478,24 @@ textarea {
  display: inline-block;
  text-align: center;
}

{+.comment-underline {+}
{+  /* text-decoration: solid underline rgb(255, 215, 82) 3px; */+}
{+  border-bottom: solid rgb(255, 215, 82) 3px;+}
{+}+}

{+.comment-underline:hover {+}
{+  border-bottom: solid rgb(230, 194, 76) 3px;+}
{+}+}

{+.comment {+}
{+  position: absolute;+}
{+  top: 0;+}
{+  left: 0;+}
{+  border: 1px grey solid;+}
{+  border-radius: 3px;+}
{+  padding: 5px;+}
{+  font-size: 11px;+}
{+  z-index: 1;+}
{+  background-color: white;+}
{+}+}
